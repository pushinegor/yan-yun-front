/* tslint:disable */
/* eslint-disable */
/**
 * Yan Yun — магазин китайского чая
 * Документация REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import useSWR, { SWRConfiguration } from "swr";

import {
	CreateUserDto,
	CreateUserDtoFromJSON,
	CreateUserDtoToJSON,
	UserDto,
	UserDtoFromJSON,
	UserDtoToJSON,
	UserEntity,
	UserEntityFromJSON,
	UserEntityToJSON,
} from "../models";

export interface DeleteRequest {
	id: string;
}

export interface CreateUserRequest {
	createUserDto: CreateUserDto;
}

export interface GetUserByIdRequest {
	id: string;
}

export interface UsersListRequest {
	role?: UsersListRoleEnum;
}

/**
 *
 */
export class UserApi extends runtime.BaseAPI {
	/**
	 * Удалить пользователя по id
	 */
	private async _deleteRaw(requestParameters: DeleteRequest): Promise<runtime.ApiResponse<UserEntity>> {
		this._deleteValidation(requestParameters);
		const context = this._deleteContext(requestParameters);
		const response = await this.request(context);

		return new runtime.JSONApiResponse(response, (jsonValue) => UserEntityFromJSON(jsonValue));
	}

	/**
	 * Удалить пользователя по id
	 */
	private _deleteValidation(requestParameters: DeleteRequest) {
		if (requestParameters.id === null || requestParameters.id === undefined) {
			throw new runtime.RequiredError(
				"id",
				"Required parameter requestParameters.id was null or undefined when calling _delete."
			);
		}
	}

	/**
	 * Удалить пользователя по id
	 */
	private _deleteContext(requestParameters: DeleteRequest): runtime.RequestOpts {
		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		return {
			path: `/api/user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
			method: "DELETE",
			headers: headerParameters,
			query: queryParameters,
		};
	}

	/**
	 * Удалить пользователя по id
	 */
	_delete = async (id: string): Promise<UserEntity> => {
		const response = await this._deleteRaw({ id: id });
		return await response.value();
	};

	useDelete(id: string, config?: SWRConfiguration<UserEntity, Error>) {
		let valid = true;

		if (id === null || id === undefined || Number.isNaN(id)) {
			valid = false;
		}

		const context = this._deleteContext({ id: id! });
		return useSWR(JSON.stringify(context), valid ? () => this._delete(id!) : null, config);
	}

	/**
	 * Создание пользователя
	 */
	private async createUserRaw(requestParameters: CreateUserRequest): Promise<runtime.ApiResponse<CreateUserDto>> {
		this.createUserValidation(requestParameters);
		const context = this.createUserContext(requestParameters);
		const response = await this.request(context);

		return new runtime.JSONApiResponse(response, (jsonValue) => CreateUserDtoFromJSON(jsonValue));
	}

	/**
	 * Создание пользователя
	 */
	private createUserValidation(requestParameters: CreateUserRequest) {
		if (requestParameters.createUserDto === null || requestParameters.createUserDto === undefined) {
			throw new runtime.RequiredError(
				"createUserDto",
				"Required parameter requestParameters.createUserDto was null or undefined when calling createUser."
			);
		}
	}

	/**
	 * Создание пользователя
	 */
	private createUserContext(requestParameters: CreateUserRequest): runtime.RequestOpts {
		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters["Content-Type"] = "application/json";

		return {
			path: `/api/user`,
			method: "POST",
			headers: headerParameters,
			query: queryParameters,
			body: CreateUserDtoToJSON(requestParameters.createUserDto),
		};
	}

	/**
	 * Создание пользователя
	 */
	createUser = async (createUserDto: CreateUserDto): Promise<CreateUserDto> => {
		const response = await this.createUserRaw({ createUserDto: createUserDto });
		return await response.value();
	};

	/**
	 * Получить пользователя по id
	 */
	private async getUserByIdRaw(requestParameters: GetUserByIdRequest): Promise<runtime.ApiResponse<UserEntity>> {
		this.getUserByIdValidation(requestParameters);
		const context = this.getUserByIdContext(requestParameters);
		const response = await this.request(context);

		return new runtime.JSONApiResponse(response, (jsonValue) => UserEntityFromJSON(jsonValue));
	}

	/**
	 * Получить пользователя по id
	 */
	private getUserByIdValidation(requestParameters: GetUserByIdRequest) {
		if (requestParameters.id === null || requestParameters.id === undefined) {
			throw new runtime.RequiredError(
				"id",
				"Required parameter requestParameters.id was null or undefined when calling getUserById."
			);
		}
	}

	/**
	 * Получить пользователя по id
	 */
	private getUserByIdContext(requestParameters: GetUserByIdRequest): runtime.RequestOpts {
		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		return {
			path: `/api/user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
			method: "GET",
			headers: headerParameters,
			query: queryParameters,
		};
	}

	/**
	 * Получить пользователя по id
	 */
	getUserById = async (id: string): Promise<UserEntity> => {
		const response = await this.getUserByIdRaw({ id: id });
		return await response.value();
	};

	useGetUserById(id: string, config?: SWRConfiguration<UserEntity, Error>) {
		let valid = true;

		if (id === null || id === undefined || Number.isNaN(id)) {
			valid = false;
		}

		const context = this.getUserByIdContext({ id: id! });
		return useSWR(JSON.stringify(context), valid ? () => this.getUserById(id!) : null, config);
	}

	/**
	 * Список пользователей
	 */
	private async usersListRaw(requestParameters: UsersListRequest): Promise<runtime.ApiResponse<Array<UserDto>>> {
		this.usersListValidation(requestParameters);
		const context = this.usersListContext(requestParameters);
		const response = await this.request(context);

		return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserDtoFromJSON));
	}

	/**
	 * Список пользователей
	 */
	private usersListValidation(requestParameters: UsersListRequest) {}

	/**
	 * Список пользователей
	 */
	private usersListContext(requestParameters: UsersListRequest): runtime.RequestOpts {
		const queryParameters: any = {};

		if (requestParameters.role !== undefined) {
			queryParameters["role"] = requestParameters.role;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		return {
			path: `/api/user`,
			method: "GET",
			headers: headerParameters,
			query: queryParameters,
		};
	}

	/**
	 * Список пользователей
	 */
	usersList = async (role?: UsersListRoleEnum): Promise<Array<UserDto>> => {
		const response = await this.usersListRaw({ role: role });
		return await response.value();
	};

	useUsersList(role?: UsersListRoleEnum, config?: SWRConfiguration<Array<UserDto>, Error>) {
		let valid = true;

		const context = this.usersListContext({ role: role! });
		return useSWR(JSON.stringify(context), valid ? () => this.usersList(role!) : null, config);
	}
}

/**
 * @export
 * @enum {string}
 */
export enum UsersListRoleEnum {
	customer = "customer",
	business = "business",
	admin = "admin",
	root = "root",
}
