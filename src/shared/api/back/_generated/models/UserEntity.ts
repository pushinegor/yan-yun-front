/* tslint:disable */
/* eslint-disable */
/**
 * Yan Yun — магазин китайского чая
 * Документация REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import { ImageEntity, ImageEntityFromJSON, ImageEntityFromJSONTyped, ImageEntityToJSON } from "./";

/**
 *
 * @export
 * @interface UserEntity
 */
export interface UserEntity {
	/**
	 * Уникальный идентификатор
	 * @type {string}
	 * @memberof UserEntity
	 */
	id: string;
	/**
	 * E-mail
	 * @type {string}
	 * @memberof UserEntity
	 */
	email: string;
	/**
	 * Пароль
	 * @type {string}
	 * @memberof UserEntity
	 */
	password: string;
	/**
	 * Роль пользователя
	 * @type {string}
	 * @memberof UserEntity
	 */
	role: UserEntityRoleEnum;
	/**
	 * Имя
	 * @type {string}
	 * @memberof UserEntity
	 */
	firstName?: string;
	/**
	 * Отчество
	 * @type {string}
	 * @memberof UserEntity
	 */
	middleName?: string;
	/**
	 * Фамилия
	 * @type {string}
	 * @memberof UserEntity
	 */
	lastName?: string;
	/**
	 * Дата рождения
	 * @type {Date}
	 * @memberof UserEntity
	 */
	birthDay?: Date;
	/**
	 * Номер телефона
	 * @type {string}
	 * @memberof UserEntity
	 */
	phone?: string;
	/**
	 * Пол(мужчина или женщина)
	 * @type {string}
	 * @memberof UserEntity
	 */
	gender?: UserEntityGenderEnum;
	/**
	 * Город
	 * @type {string}
	 * @memberof UserEntity
	 */
	city?: string;
	/**
	 * Аватар
	 * @type {ImageEntity}
	 * @memberof UserEntity
	 */
	avatar?: ImageEntity;
	/**
	 * Согласие на email-рассылку
	 * @type {boolean}
	 * @memberof UserEntity
	 */
	hasEmailAgree?: boolean;
	/**
	 * Согласие на sms-рассылку
	 * @type {boolean}
	 * @memberof UserEntity
	 */
	hasSMSAgree?: boolean;
	/**
	 * Согласие на push-уведомления
	 * @type {boolean}
	 * @memberof UserEntity
	 */
	hasPushNotificationAgree?: boolean;
}

export function UserEntityFromJSON(json: any): UserEntity {
	return UserEntityFromJSONTyped(json, false);
}

export function UserEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserEntity {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		id: json["id"],
		email: json["email"],
		password: json["password"],
		role: json["role"],
		firstName: !exists(json, "firstName") ? undefined : json["firstName"],
		middleName: !exists(json, "middleName") ? undefined : json["middleName"],
		lastName: !exists(json, "lastName") ? undefined : json["lastName"],
		birthDay: !exists(json, "birthDay") ? undefined : new Date(json["birthDay"]),
		phone: !exists(json, "phone") ? undefined : json["phone"],
		gender: !exists(json, "gender") ? undefined : json["gender"],
		city: !exists(json, "city") ? undefined : json["city"],
		avatar: !exists(json, "avatar") ? undefined : ImageEntityFromJSON(json["avatar"]),
		hasEmailAgree: !exists(json, "hasEmailAgree") ? undefined : json["hasEmailAgree"],
		hasSMSAgree: !exists(json, "hasSMSAgree") ? undefined : json["hasSMSAgree"],
		hasPushNotificationAgree: !exists(json, "hasPushNotificationAgree")
			? undefined
			: json["hasPushNotificationAgree"],
	};
}

export function UserEntityToJSON(value?: UserEntity | null): any {
	if (value === undefined) {
		return null;
	}
	if (value === null) {
		return null;
	}
	return {
		id: value.id === undefined ? undefined : value.id,
		email: value.email === undefined ? undefined : value.email,
		password: value.password === undefined ? undefined : value.password,
		role: value.role === undefined ? undefined : value.role,
		firstName: value.firstName === undefined ? undefined : value.firstName,
		middleName: value.middleName === undefined ? undefined : value.middleName,
		lastName: value.lastName === undefined ? undefined : value.lastName,
		birthDay: value.birthDay === undefined ? undefined : value.birthDay.toISOString(),
		phone: value.phone === undefined ? undefined : value.phone,
		gender: value.gender === undefined ? undefined : value.gender,
		city: value.city === undefined ? undefined : value.city,
		avatar: ImageEntityToJSON(value.avatar),
		hasEmailAgree: value.hasEmailAgree === undefined ? undefined : value.hasEmailAgree,
		hasSMSAgree: value.hasSMSAgree === undefined ? undefined : value.hasSMSAgree,
		hasPushNotificationAgree:
			value.hasPushNotificationAgree === undefined ? undefined : value.hasPushNotificationAgree,
	};
}

/**
 * @export
 * @enum {string}
 */
export enum UserEntityRoleEnum {
	customer = "customer",
	business = "business",
	admin = "admin",
	root = "root",
}
/**
 * @export
 * @enum {string}
 */
export enum UserEntityGenderEnum {
	male = "male",
	female = "female",
}
